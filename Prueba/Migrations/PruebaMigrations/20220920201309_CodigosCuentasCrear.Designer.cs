// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prueba.Context;

#nullable disable

namespace Prueba.Migrations.PruebaMigrations
{
    [DbContext(typeof(PruebaContext))]
    [Migration("20220920201309_CodigosCuentasCrear")]
    partial class CodigosCuentasCrear
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.Activo", b =>
                {
                    b.Property<int>("IdActivo")
                        .HasColumnType("int")
                        .HasColumnName("id_activo");

                    b.Property<int>("IdAsiento")
                        .HasColumnType("int")
                        .HasColumnName("id_asiento");

                    b.ToTable("Activos");
                });

            modelBuilder.Entity("Prueba.Models.AreaComun", b =>
                {
                    b.Property<bool>("Disponible")
                        .HasColumnType("bit")
                        .HasColumnName("disponible");

                    b.Property<int>("IdAcomun")
                        .HasColumnType("int")
                        .HasColumnName("id_acomun");

                    b.Property<int>("IdInmueble")
                        .HasColumnType("int")
                        .HasColumnName("id_inmueble");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("nombre");

                    b.ToTable("Area_Comun", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Prueba.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Prueba.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Prueba.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Prueba.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Prueba.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Prueba.Models.BalanceComprobacion", b =>
                {
                    b.Property<decimal>("Diferencia")
                        .HasColumnType("money")
                        .HasColumnName("diferencia");

                    b.Property<decimal>("Fecha")
                        .HasColumnType("money")
                        .HasColumnName("fecha");

                    b.Property<int>("IdAsiento")
                        .HasColumnType("int")
                        .HasColumnName("id_asiento");

                    b.Property<int>("IdBalanceC")
                        .HasColumnType("int")
                        .HasColumnName("id_balanceC");

                    b.Property<decimal>("SaldoFinal")
                        .HasColumnType("money")
                        .HasColumnName("saldo_final");

                    b.Property<decimal>("SaldoInicial")
                        .HasColumnType("money")
                        .HasColumnName("saldo_inicial");

                    b.ToTable("Balance_Comprobacion", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.CambioSueldo", b =>
                {
                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("cargo");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<int>("IdCsueldo")
                        .HasColumnType("int")
                        .HasColumnName("id_csueldo");

                    b.Property<int>("IdEmpleado")
                        .HasColumnType("int")
                        .HasColumnName("id_empleado");

                    b.Property<decimal>("Salario")
                        .HasColumnType("money")
                        .HasColumnName("salario");

                    b.ToTable("Cambio_Sueldo", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.CodigoCuentasGlobal", b =>
                {
                    b.Property<int>("IdCodCuenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_codCuenta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCodCuenta"), 1L, 1);

                    b.Property<short>("Clase")
                        .HasColumnType("smallint")
                        .HasColumnName("clase");

                    b.Property<short>("Cuenta")
                        .HasColumnType("smallint")
                        .HasColumnName("cuenta");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("description");

                    b.Property<short>("Grupo")
                        .HasColumnType("smallint")
                        .HasColumnName("grupo");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnName("id_Condominio");

                    b.Property<short>("Subcuenta")
                        .HasColumnType("smallint")
                        .HasColumnName("subcuenta");

                    b.HasKey("IdCodCuenta");

                    b.HasIndex("IdCondominio");

                    b.ToTable("CodigoCuentas_Global", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.Condominio", b =>
                {
                    b.Property<int>("IdCondominio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_condominio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCondominio"), 1L, 1);

                    b.Property<string>("IdAdministrador")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_administrador");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("Rif")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("rif");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("tipo");

                    b.HasKey("IdCondominio");

                    b.HasIndex(new[] { "IdAdministrador" }, "IX_Condominio")
                        .IsUnique();

                    b.ToTable("Condominio", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.Empleado", b =>
                {
                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("apellido");

                    b.Property<int>("Cedula")
                        .HasColumnType("int")
                        .HasColumnName("cedula");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("date")
                        .HasColumnName("fecha_ingreso");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnName("id_condominio");

                    b.Property<int>("IdEmpleado")
                        .HasColumnType("int")
                        .HasColumnName("id_empleado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("nombre");

                    b.ToTable("Empleado", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.Estacionamiento", b =>
                {
                    b.Property<int>("IdEstacionamiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_estacionamiento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstacionamiento"), 1L, 1);

                    b.Property<int>("IdInmueble")
                        .HasColumnType("int")
                        .HasColumnName("id_inmueble");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("nombre");

                    b.Property<int>("NumPuestos")
                        .HasColumnType("int")
                        .HasColumnName("num_puestos");

                    b.HasKey("IdEstacionamiento");

                    b.HasIndex("IdInmueble");

                    b.ToTable("Estacionamiento", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.Estado", b =>
                {
                    b.Property<int>("IdEstado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_estado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstado"), 1L, 1);

                    b.Property<int>("IdPais")
                        .HasColumnType("int")
                        .HasColumnName("id_pais");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("nombre");

                    b.HasKey("IdEstado");

                    b.HasIndex("IdPais");

                    b.ToTable("Estado", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.EstadoResultado", b =>
                {
                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<int>("IdEstResultado")
                        .HasColumnType("int")
                        .HasColumnName("id_estResultado");

                    b.Property<int>("IdGasto")
                        .HasColumnType("int")
                        .HasColumnName("id_gasto");

                    b.Property<int>("IdIngreso")
                        .HasColumnType("int")
                        .HasColumnName("id_ingreso");

                    b.Property<decimal>("TotalGastos")
                        .HasColumnType("money")
                        .HasColumnName("total_gastos");

                    b.Property<decimal>("TotalIngresos")
                        .HasColumnType("money")
                        .HasColumnName("total_ingresos");

                    b.ToTable("Estado_Resultado", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.EstadoSituacion", b =>
                {
                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<int>("IdActivo")
                        .HasColumnType("int")
                        .HasColumnName("id_activo");

                    b.Property<int>("IdEstSituacion")
                        .HasColumnType("int")
                        .HasColumnName("id_estSituacion");

                    b.Property<int>("IdPasivo")
                        .HasColumnType("int")
                        .HasColumnName("id_pasivo");

                    b.Property<int>("IdPatrimonio")
                        .HasColumnType("int")
                        .HasColumnName("id_patrimonio");

                    b.Property<decimal>("TotalAct")
                        .HasColumnType("money")
                        .HasColumnName("total_act");

                    b.Property<decimal>("TotalPas")
                        .HasColumnType("money")
                        .HasColumnName("total_pas");

                    b.Property<decimal>("TotalPat")
                        .HasColumnType("money")
                        .HasColumnName("total_pat");

                    b.ToTable("Estado_Situacion", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.Factura", b =>
                {
                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnName("id_condominio");

                    b.Property<int>("IdFactura")
                        .HasColumnType("int")
                        .HasColumnName("id_factura");

                    b.Property<int>("IdProveedor")
                        .HasColumnType("int")
                        .HasColumnName("id_proveedor");

                    b.Property<int>("NumFactura")
                        .HasColumnType("int")
                        .HasColumnName("num_factura");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("razon_social");

                    b.Property<decimal>("Total")
                        .HasColumnType("money")
                        .HasColumnName("total");

                    b.ToTable("Factura", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.Gasto", b =>
                {
                    b.Property<int>("IdGasto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_gasto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGasto"), 1L, 1);

                    b.Property<int>("IdAsiento")
                        .HasColumnType("int")
                        .HasColumnName("id_asiento");

                    b.HasKey("IdGasto");

                    b.HasIndex("IdAsiento");

                    b.ToTable("Gastos");
                });

            modelBuilder.Entity("Prueba.Models.Ingreso", b =>
                {
                    b.Property<int>("IdIngreso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_ingreso");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdIngreso"), 1L, 1);

                    b.Property<int>("IdAsiento")
                        .HasColumnType("int")
                        .HasColumnName("id_asiento");

                    b.HasKey("IdIngreso");

                    b.HasIndex("IdAsiento");

                    b.ToTable("Ingresos");
                });

            modelBuilder.Entity("Prueba.Models.Inmueble", b =>
                {
                    b.Property<int>("IdInmueble")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_inmueble");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnName("id_condominio");

                    b.Property<int>("IdZona")
                        .HasColumnType("int")
                        .HasColumnName("id_zona");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("nombre");

                    b.Property<int>("TotalPropiedad")
                        .HasColumnType("int")
                        .HasColumnName("total_propiedad");

                    b.HasKey("IdInmueble");

                    b.HasIndex("IdCondominio");

                    b.ToTable("Inmueble", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.LdiarioGlobal", b =>
                {
                    b.Property<int>("IdAsiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_asiento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAsiento"), 1L, 1);

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("concepto");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<int>("IdCodCuenta")
                        .HasColumnType("int")
                        .HasColumnName("id_codCuenta");

                    b.Property<decimal>("Monto")
                        .HasColumnType("money")
                        .HasColumnName("monto");

                    b.Property<bool>("TipoOperacion")
                        .HasColumnType("bit")
                        .HasColumnName("tipo_operacion");

                    b.HasKey("IdAsiento");

                    b.HasIndex("IdCodCuenta");

                    b.ToTable("LDiario_Global", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.Municipio", b =>
                {
                    b.Property<int>("IdMunicipio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_municipio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMunicipio"), 1L, 1);

                    b.Property<int>("IdEstado")
                        .HasColumnType("int")
                        .HasColumnName("id_estado");

                    b.Property<string>("Municipio1")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("municipio");

                    b.HasKey("IdMunicipio");

                    b.HasIndex("IdEstado");

                    b.ToTable("Municipios");
                });

            modelBuilder.Entity("Prueba.Models.PagoEmitido", b =>
                {
                    b.Property<int>("IdPagoEmitido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pagoEmitido");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPagoEmitido"), 1L, 1);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<bool>("FormaPago")
                        .HasColumnType("bit")
                        .HasColumnName("forma_pago");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnName("id_condominio");

                    b.Property<int?>("IdProveedor")
                        .HasColumnType("int")
                        .HasColumnName("id_proveedor");

                    b.Property<decimal>("Monto")
                        .HasColumnType("money")
                        .HasColumnName("monto");

                    b.HasKey("IdPagoEmitido");

                    b.HasIndex("IdCondominio");

                    b.ToTable("Pago_Emitido", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.PagoRecibido", b =>
                {
                    b.Property<int>("IdPagoRecibido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pagoRecibido");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPagoRecibido"), 1L, 1);

                    b.Property<bool>("Conciliado")
                        .HasColumnType("bit")
                        .HasColumnName("conciliado");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<bool>("FormaPago")
                        .HasColumnType("bit")
                        .HasColumnName("forma_pago");

                    b.Property<int>("IdPropiedad")
                        .HasColumnType("int")
                        .HasColumnName("id_propiedad");

                    b.Property<decimal>("Monto")
                        .HasColumnType("money")
                        .HasColumnName("monto");

                    b.HasKey("IdPagoRecibido");

                    b.HasIndex("IdPropiedad");

                    b.ToTable("Pago_Recibido", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.Pais", b =>
                {
                    b.Property<int>("IdPais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pais");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPais"), 1L, 1);

                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("abreviatura");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("IdPais");

                    b.ToTable("Pais");
                });

            modelBuilder.Entity("Prueba.Models.Parroquia", b =>
                {
                    b.Property<int>("IdParroquia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_parroquia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdParroquia"), 1L, 1);

                    b.Property<int>("IdMunicipio")
                        .HasColumnType("int")
                        .HasColumnName("id_municipio");

                    b.Property<string>("Parroquia1")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("parroquia");

                    b.Property<short>("Urbana")
                        .HasColumnType("smallint")
                        .HasColumnName("urbana");

                    b.HasKey("IdParroquia");

                    b.HasIndex("IdMunicipio");

                    b.ToTable("Parroquias");
                });

            modelBuilder.Entity("Prueba.Models.Pasivo", b =>
                {
                    b.Property<int>("IdAsiento")
                        .HasColumnType("int")
                        .HasColumnName("id_asiento");

                    b.Property<int>("IdPasivo")
                        .HasColumnType("int")
                        .HasColumnName("id_pasivo");

                    b.ToTable("Pasivos");
                });

            modelBuilder.Entity("Prueba.Models.Patrimonio", b =>
                {
                    b.Property<int>("IdAsiento")
                        .HasColumnType("int")
                        .HasColumnName("id_asiento");

                    b.Property<int>("IdPatrimonio")
                        .HasColumnType("int")
                        .HasColumnName("id_patrimonio");

                    b.ToTable("Patrimonio", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.Propiedad", b =>
                {
                    b.Property<int>("IdPropiedad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_propiedad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPropiedad"), 1L, 1);

                    b.Property<decimal>("Alicuota")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("alicuota");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("codigo");

                    b.Property<decimal>("Deuda")
                        .HasColumnType("money")
                        .HasColumnName("deuda");

                    b.Property<decimal>("Dimensiones")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("dimensiones");

                    b.Property<int>("IdInmueble")
                        .HasColumnType("int")
                        .HasColumnName("id_inmueble");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_usuario");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("money")
                        .HasColumnName("saldo");

                    b.Property<decimal>("Solvencia")
                        .HasColumnType("money")
                        .HasColumnName("solvencia");

                    b.HasKey("IdPropiedad");

                    b.HasIndex("IdInmueble");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Propiedad", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.Proveedor", b =>
                {
                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("descripcion");

                    b.Property<int>("IdProveedor")
                        .HasColumnType("int")
                        .HasColumnName("id_proveedor");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("nombre");

                    b.Property<string>("Rif")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("rif");

                    b.Property<int>("Telefono")
                        .HasColumnType("int")
                        .HasColumnName("telefono");

                    b.ToTable("Proveedor", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.PuestoE", b =>
                {
                    b.Property<int>("IdPuestoE")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_puestoE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPuestoE"), 1L, 1);

                    b.Property<int>("Alicuota")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("codigo");

                    b.Property<int>("IdEstacionamiento")
                        .HasColumnType("int")
                        .HasColumnName("id_estacionamiento");

                    b.Property<int>("IdPropiedad")
                        .HasColumnType("int")
                        .HasColumnName("id_propiedad");

                    b.HasKey("IdPuestoE")
                        .HasName("PK_Puesto_E");

                    b.HasIndex("IdEstacionamiento");

                    b.HasIndex("IdPropiedad");

                    b.ToTable("PuestoE", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.ReciboCobro", b =>
                {
                    b.Property<int>("IdReciboCobro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_reciboCobro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReciboCobro"), 1L, 1);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<int>("IdPropiedad")
                        .HasColumnType("int")
                        .HasColumnName("id_propiedad");

                    b.Property<int>("IdRgastos")
                        .HasColumnType("int")
                        .HasColumnName("id_rgastos");

                    b.Property<decimal>("Monto")
                        .HasColumnType("money")
                        .HasColumnName("monto");

                    b.HasKey("IdReciboCobro");

                    b.HasIndex("IdPropiedad");

                    b.HasIndex("IdRgastos");

                    b.ToTable("Recibo_Cobro", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.ReciboNomina", b =>
                {
                    b.Property<bool>("Entregado")
                        .HasColumnType("bit")
                        .HasColumnName("entregado");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnName("id_condominio");

                    b.Property<int>("IdReciboNomina")
                        .HasColumnType("int")
                        .HasColumnName("id_reciboNomina");

                    b.ToTable("Recibo_Nomina", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.ReferenciasPe", b =>
                {
                    b.Property<int>("IdPagoEmitido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pagoEmitido");

                    b.Property<string>("Banco")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("banco");

                    b.Property<int>("NumReferencia")
                        .HasColumnType("int")
                        .HasColumnName("num_referencia");

                    b.HasKey("IdPagoEmitido")
                        .HasName("PK_Referencias_PE_1");

                    b.ToTable("Referencias_PE", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.ReferenciasPr", b =>
                {
                    b.Property<int>("IdPagoRecibido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pagoRecibido");

                    b.Property<string>("Banco")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("banco");

                    b.Property<int>("NumReferencia")
                        .HasColumnType("int")
                        .HasColumnName("num_referencia");

                    b.HasKey("IdPagoRecibido");

                    b.ToTable("Referencias_PR", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.RegistroNomina", b =>
                {
                    b.Property<decimal>("Asignaciones")
                        .HasColumnType("money")
                        .HasColumnName("asignaciones");

                    b.Property<decimal>("Deducciones")
                        .HasColumnType("money")
                        .HasColumnName("deducciones");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("descripcion");

                    b.Property<short>("Dias")
                        .HasColumnType("smallint")
                        .HasColumnName("dias");

                    b.Property<TimeSpan>("Horas")
                        .HasColumnType("time")
                        .HasColumnName("horas");

                    b.Property<int>("IdEmpleado")
                        .HasColumnType("int")
                        .HasColumnName("id_empleado");

                    b.Property<int>("IdReciboNomina")
                        .HasColumnType("int")
                        .HasColumnName("id_reciboNomina");

                    b.Property<int>("IdRegistroNomina")
                        .HasColumnType("int")
                        .HasColumnName("id_registroNomina");

                    b.ToTable("Registro_Nomina", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.RelacionGasto", b =>
                {
                    b.Property<int>("IdRgastos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_rgastos");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRgastos"), 1L, 1);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<decimal>("GastosNomina")
                        .HasColumnType("money")
                        .HasColumnName("gastos_nomina");

                    b.Property<decimal>("GastosPatrimonio")
                        .HasColumnType("money")
                        .HasColumnName("gastos_patrimonio");

                    b.Property<decimal>("GastosServicios")
                        .HasColumnType("money")
                        .HasColumnName("gastos_servicios");

                    b.Property<int>("IdCondominio")
                        .HasColumnType("int")
                        .HasColumnName("id_condominio");

                    b.Property<int?>("IdFactura")
                        .HasColumnType("int")
                        .HasColumnName("id_factura");

                    b.Property<int?>("IdRegistroNomina")
                        .HasColumnType("int")
                        .HasColumnName("id_registroNomina");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("money")
                        .HasColumnName("sub_total");

                    b.Property<decimal>("TotalMensual")
                        .HasColumnType("money")
                        .HasColumnName("total_mensual");

                    b.HasKey("IdRgastos");

                    b.HasIndex("IdCondominio");

                    b.ToTable("Relacion_Gastos", (string)null);
                });

            modelBuilder.Entity("Prueba.Models.Zona", b =>
                {
                    b.Property<int>("IdZona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_zona");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdZona"), 1L, 1);

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("int")
                        .HasColumnName("codigo_postal");

                    b.Property<int>("IdParroquia")
                        .HasColumnType("int")
                        .HasColumnName("id_parroquia");

                    b.Property<string>("Zona1")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("zona");

                    b.HasKey("IdZona");

                    b.HasIndex("IdParroquia");

                    b.ToTable("Zonas");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("Prueba.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prueba.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prueba.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("Prueba.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Prueba.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("Prueba.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prueba.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Prueba.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prueba.Models.AspNetUserToken", b =>
                {
                    b.HasOne("Prueba.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prueba.Models.CodigoCuentasGlobal", b =>
                {
                    b.HasOne("Prueba.Models.Condominio", "IdCondominioNavigation")
                        .WithMany("CodigoCuentasGlobals")
                        .HasForeignKey("IdCondominio")
                        .IsRequired()
                        .HasConstraintName("FK_CodigoCuentas_Global_Condominio1");

                    b.Navigation("IdCondominioNavigation");
                });

            modelBuilder.Entity("Prueba.Models.Condominio", b =>
                {
                    b.HasOne("Prueba.Models.AspNetUser", "IdAdministradorNavigation")
                        .WithOne("Condominio")
                        .HasForeignKey("Prueba.Models.Condominio", "IdAdministrador")
                        .IsRequired()
                        .HasConstraintName("FK_Condominio_AspNetUsers");

                    b.Navigation("IdAdministradorNavigation");
                });

            modelBuilder.Entity("Prueba.Models.Estacionamiento", b =>
                {
                    b.HasOne("Prueba.Models.Inmueble", "IdInmuebleNavigation")
                        .WithMany("Estacionamientos")
                        .HasForeignKey("IdInmueble")
                        .IsRequired()
                        .HasConstraintName("FK_Estacionamiento_Inmueble");

                    b.Navigation("IdInmuebleNavigation");
                });

            modelBuilder.Entity("Prueba.Models.Estado", b =>
                {
                    b.HasOne("Prueba.Models.Pais", "IdPaisNavigation")
                        .WithMany("Estados")
                        .HasForeignKey("IdPais")
                        .IsRequired()
                        .HasConstraintName("FK_Estado_Pais");

                    b.Navigation("IdPaisNavigation");
                });

            modelBuilder.Entity("Prueba.Models.Gasto", b =>
                {
                    b.HasOne("Prueba.Models.LdiarioGlobal", "IdAsientoNavigation")
                        .WithMany("Gastos")
                        .HasForeignKey("IdAsiento")
                        .IsRequired()
                        .HasConstraintName("FK_Gastos_LDiario_Global");

                    b.Navigation("IdAsientoNavigation");
                });

            modelBuilder.Entity("Prueba.Models.Ingreso", b =>
                {
                    b.HasOne("Prueba.Models.LdiarioGlobal", "IdAsientoNavigation")
                        .WithMany("Ingresos")
                        .HasForeignKey("IdAsiento")
                        .IsRequired()
                        .HasConstraintName("FK_Ingresos_LDiario_Global");

                    b.Navigation("IdAsientoNavigation");
                });

            modelBuilder.Entity("Prueba.Models.Inmueble", b =>
                {
                    b.HasOne("Prueba.Models.Condominio", "IdCondominioNavigation")
                        .WithMany("Inmuebles")
                        .HasForeignKey("IdCondominio")
                        .IsRequired()
                        .HasConstraintName("FK_Inmueble_Condominio");

                    b.HasOne("Prueba.Models.Zona", "IdInmuebleNavigation")
                        .WithOne("Inmueble")
                        .HasForeignKey("Prueba.Models.Inmueble", "IdInmueble")
                        .IsRequired()
                        .HasConstraintName("FK_Inmueble_Zonas");

                    b.Navigation("IdCondominioNavigation");

                    b.Navigation("IdInmuebleNavigation");
                });

            modelBuilder.Entity("Prueba.Models.LdiarioGlobal", b =>
                {
                    b.HasOne("Prueba.Models.CodigoCuentasGlobal", "IdCodCuentaNavigation")
                        .WithMany("LdiarioGlobals")
                        .HasForeignKey("IdCodCuenta")
                        .IsRequired()
                        .HasConstraintName("FK_LDiario_Global_CodigoCuentas_Global");

                    b.Navigation("IdCodCuentaNavigation");
                });

            modelBuilder.Entity("Prueba.Models.Municipio", b =>
                {
                    b.HasOne("Prueba.Models.Estado", "IdEstadoNavigation")
                        .WithMany("Municipios")
                        .HasForeignKey("IdEstado")
                        .IsRequired()
                        .HasConstraintName("FK_Municipios_Estado");

                    b.Navigation("IdEstadoNavigation");
                });

            modelBuilder.Entity("Prueba.Models.PagoEmitido", b =>
                {
                    b.HasOne("Prueba.Models.Condominio", "IdCondominioNavigation")
                        .WithMany("PagoEmitidos")
                        .HasForeignKey("IdCondominio")
                        .IsRequired()
                        .HasConstraintName("FK_Pago_Emitido_Condominio");

                    b.Navigation("IdCondominioNavigation");
                });

            modelBuilder.Entity("Prueba.Models.PagoRecibido", b =>
                {
                    b.HasOne("Prueba.Models.Propiedad", "IdPropiedadNavigation")
                        .WithMany("PagoRecibidos")
                        .HasForeignKey("IdPropiedad")
                        .IsRequired()
                        .HasConstraintName("FK_Pago_Recibido_Propiedad");

                    b.Navigation("IdPropiedadNavigation");
                });

            modelBuilder.Entity("Prueba.Models.Parroquia", b =>
                {
                    b.HasOne("Prueba.Models.Municipio", "IdMunicipioNavigation")
                        .WithMany("Parroquia")
                        .HasForeignKey("IdMunicipio")
                        .IsRequired()
                        .HasConstraintName("FK_Parroquias_Municipios");

                    b.Navigation("IdMunicipioNavigation");
                });

            modelBuilder.Entity("Prueba.Models.Propiedad", b =>
                {
                    b.HasOne("Prueba.Models.Inmueble", "IdInmuebleNavigation")
                        .WithMany("Propiedads")
                        .HasForeignKey("IdInmueble")
                        .IsRequired()
                        .HasConstraintName("FK_Propiedad_Inmueble");

                    b.HasOne("Prueba.Models.AspNetUser", "IdUsuarioNavigation")
                        .WithMany("Propiedads")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_Propiedad_AspNetUsers");

                    b.Navigation("IdInmuebleNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Prueba.Models.PuestoE", b =>
                {
                    b.HasOne("Prueba.Models.Estacionamiento", "IdEstacionamientoNavigation")
                        .WithMany("PuestoEs")
                        .HasForeignKey("IdEstacionamiento")
                        .IsRequired()
                        .HasConstraintName("FK_Puesto_E_Estacionamiento");

                    b.HasOne("Prueba.Models.Propiedad", "IdPropiedadNavigation")
                        .WithMany("PuestoEs")
                        .HasForeignKey("IdPropiedad")
                        .IsRequired()
                        .HasConstraintName("FK_Puesto_E_Propiedad");

                    b.Navigation("IdEstacionamientoNavigation");

                    b.Navigation("IdPropiedadNavigation");
                });

            modelBuilder.Entity("Prueba.Models.ReciboCobro", b =>
                {
                    b.HasOne("Prueba.Models.Propiedad", "IdPropiedadNavigation")
                        .WithMany("ReciboCobros")
                        .HasForeignKey("IdPropiedad")
                        .IsRequired()
                        .HasConstraintName("FK_Recibo_Cobro_Propiedad");

                    b.HasOne("Prueba.Models.RelacionGasto", "IdRgastosNavigation")
                        .WithMany("ReciboCobros")
                        .HasForeignKey("IdRgastos")
                        .IsRequired()
                        .HasConstraintName("FK_Recibo_Cobro_Relacion_Gastos");

                    b.Navigation("IdPropiedadNavigation");

                    b.Navigation("IdRgastosNavigation");
                });

            modelBuilder.Entity("Prueba.Models.ReferenciasPe", b =>
                {
                    b.HasOne("Prueba.Models.PagoEmitido", "IdPagoEmitidoNavigation")
                        .WithOne("ReferenciasPe")
                        .HasForeignKey("Prueba.Models.ReferenciasPe", "IdPagoEmitido")
                        .IsRequired()
                        .HasConstraintName("FK_Referencias_PE_Pago_Emitido");

                    b.Navigation("IdPagoEmitidoNavigation");
                });

            modelBuilder.Entity("Prueba.Models.ReferenciasPr", b =>
                {
                    b.HasOne("Prueba.Models.PagoRecibido", "IdPagoRecibidoNavigation")
                        .WithOne("ReferenciasPr")
                        .HasForeignKey("Prueba.Models.ReferenciasPr", "IdPagoRecibido")
                        .IsRequired()
                        .HasConstraintName("FK_Referencias_PR_Pago_Recibido");

                    b.Navigation("IdPagoRecibidoNavigation");
                });

            modelBuilder.Entity("Prueba.Models.RelacionGasto", b =>
                {
                    b.HasOne("Prueba.Models.Condominio", "IdCondominioNavigation")
                        .WithMany("RelacionGastos")
                        .HasForeignKey("IdCondominio")
                        .IsRequired()
                        .HasConstraintName("FK_Relacion_Gastos_Condominio");

                    b.Navigation("IdCondominioNavigation");
                });

            modelBuilder.Entity("Prueba.Models.Zona", b =>
                {
                    b.HasOne("Prueba.Models.Parroquia", "IdParroquiaNavigation")
                        .WithMany("Zonas")
                        .HasForeignKey("IdParroquia")
                        .IsRequired()
                        .HasConstraintName("FK_Zonas_Parroquias");

                    b.Navigation("IdParroquiaNavigation");
                });

            modelBuilder.Entity("Prueba.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("Prueba.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("Condominio")
                        .IsRequired();

                    b.Navigation("Propiedads");
                });

            modelBuilder.Entity("Prueba.Models.CodigoCuentasGlobal", b =>
                {
                    b.Navigation("LdiarioGlobals");
                });

            modelBuilder.Entity("Prueba.Models.Condominio", b =>
                {
                    b.Navigation("CodigoCuentasGlobals");

                    b.Navigation("Inmuebles");

                    b.Navigation("PagoEmitidos");

                    b.Navigation("RelacionGastos");
                });

            modelBuilder.Entity("Prueba.Models.Estacionamiento", b =>
                {
                    b.Navigation("PuestoEs");
                });

            modelBuilder.Entity("Prueba.Models.Estado", b =>
                {
                    b.Navigation("Municipios");
                });

            modelBuilder.Entity("Prueba.Models.Inmueble", b =>
                {
                    b.Navigation("Estacionamientos");

                    b.Navigation("Propiedads");
                });

            modelBuilder.Entity("Prueba.Models.LdiarioGlobal", b =>
                {
                    b.Navigation("Gastos");

                    b.Navigation("Ingresos");
                });

            modelBuilder.Entity("Prueba.Models.Municipio", b =>
                {
                    b.Navigation("Parroquia");
                });

            modelBuilder.Entity("Prueba.Models.PagoEmitido", b =>
                {
                    b.Navigation("ReferenciasPe")
                        .IsRequired();
                });

            modelBuilder.Entity("Prueba.Models.PagoRecibido", b =>
                {
                    b.Navigation("ReferenciasPr")
                        .IsRequired();
                });

            modelBuilder.Entity("Prueba.Models.Pais", b =>
                {
                    b.Navigation("Estados");
                });

            modelBuilder.Entity("Prueba.Models.Parroquia", b =>
                {
                    b.Navigation("Zonas");
                });

            modelBuilder.Entity("Prueba.Models.Propiedad", b =>
                {
                    b.Navigation("PagoRecibidos");

                    b.Navigation("PuestoEs");

                    b.Navigation("ReciboCobros");
                });

            modelBuilder.Entity("Prueba.Models.RelacionGasto", b =>
                {
                    b.Navigation("ReciboCobros");
                });

            modelBuilder.Entity("Prueba.Models.Zona", b =>
                {
                    b.Navigation("Inmueble")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
